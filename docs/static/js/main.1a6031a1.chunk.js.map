{"version":3,"sources":["utils/math.ts","libs/BSplinePolynomial.ts","libs/UniformBSpline.ts","pages/UniformBSplineOfOrderThree/UniformBSplineOfOrderThree.tsx","pages/UniformBSplineOfOrderThree/index.ts","libs/BSpline.ts","libs/OpenUnformBSplineClass.ts","pages/OpenUniformBSpline/index.ts","pages/OpenUniformBSpline/OpenUniformBSpline.tsx","components/RouterHeader/index.ts","components/RouterHeader/RouterHeader.tsx","pages/DynamicBSpline/DynamicBSpline.tsx","pages/DynamicBSpline/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDividedValue","numerator","denominator","BSplinePolynomial","tArray","order","maxIndex","cache","Map","polynomialArray","this","length","i","push","index","cacheFunc","get","getPolynomialFunc","func","tList","polynomialIndexSubtractOne","t","k1","k2","set","UniformBSpline","cPoints","maxT","tRange","bSplinePolynomial","generateTArray","arr","step","min","max","gens","map","o","bi","f","reduce","prev","curr","prevx","prevy","currx","curry","points","UniformBSplineOfOrderThree","elRef","useRef","useState","z","setZ","useEffect","current","zrender","init","renderer","linePoints","getPoints","line","Polyline","shape","add","forEach","circle","Circle","cx","cy","r","draggable","on","e","offsetX","offsetY","dirty","style","padding","textAlign","marginBottom","ref","width","height","BSpline","opts","Error","x","y","nx","ny","ratio","point","OpenUniformBSplineClass","mutationPointIndexes","ratioCache","bSpline","tLen","getPoint","OpenUniformBSpline","p","newPoint","updatePoint","RouterHeader","history","useHistory","location","useLocation","Group","value","pathname","onChange","target","Button","DEFAULT_C_POINTS","DEFAULT_T_ARRAY","DynamicBSpline","setOrder","cloneDeep","setCPoints","setTArray","handleGenerate","clear","error","notification","message","description","len","newTArray","undefined","console","log","layout","Item","label","cp","display","key","paddingRight","onClick","marginTop","type","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a6031a1.chunk.js","sourcesContent":["export const getDividedValue = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    return 0;\n  } else {\n    return numerator / denominator;\n  }\n};\n","/*\n * @Author: 沈经纬(327538014@qq.com)\n * @Date: 2019-12-16 15:37:00\n * @Last Modified by: 沈经纬(327538014@qq.com)\n * @Last Modified time: 2019-12-16 15:48:09\n * @Content: B样条曲线多项式求值器\n */\nimport { getDividedValue } from \"../utils/math\";\n\ntype IPolynomialFunc = (t: number) => number;\n\nexport class BSplinePolynomial {\n  /**\n   * 多项式阶数\n   */\n  readonly order: number;\n  readonly tArray: number[];\n  readonly maxIndex: number;\n  private cache: Map<number, IPolynomialFunc> = new Map();\n  private polynomialArray: BSplinePolynomial[] = [];\n\n  /**\n   * @param tArray 多项式取值边界点\n   * @param order 多项式阶数（例如3阶则为2次，5阶则为4次）\n   */\n  constructor(tArray: number[], order: number) {\n    this.tArray = tArray;\n    this.order = order;\n    this.maxIndex = tArray.length - order;\n    for (let i = 0; i < order; i += 1) {\n      this.polynomialArray.push(new BSplinePolynomial(this.tArray, i));\n    }\n  }\n\n  get(index: number): IPolynomialFunc {\n    if (index > this.maxIndex) {\n      return () => 0;\n    }\n    const cacheFunc = this.cache.get(index);\n    if (cacheFunc) {\n      return cacheFunc;\n    }\n    return this.getPolynomialFunc(index);\n  }\n\n  /**\n   * 获取多项式求值函数，返回一个接受t参数的函数\n   * @param index 即公式中k值\n   */\n  private getPolynomialFunc(index: number): IPolynomialFunc {\n    const tList = this.tArray;\n    const order = this.order;\n    const polynomialIndexSubtractOne = this.polynomialArray[order - 1];\n    let func: IPolynomialFunc;\n    if (order === 1) {\n      func = (t: number) => {\n        if (t >= this.tArray[index] && t < this.tArray[index + 1]) {\n          return 1;\n        } else {\n          return 0;\n        }\n      };\n    } else {\n      const k1 = tList[index + order - 1] - tList[index];\n      const k2 = tList[index + order] - tList[index + 1];\n      func = (t: number) => {\n        return (\n          getDividedValue(t - tList[index], k1) *\n            polynomialIndexSubtractOne.get(index)(t) +\n          getDividedValue(tList[index + order] - t, k2) *\n            polynomialIndexSubtractOne.get(index + 1)(t)\n        );\n      };\n    }\n    this.cache.set(index, func);\n    return func;\n  }\n}\n","/*\n * @Author: 沈经纬(327538014@qq.com)\n * @Date: 2019-12-16 15:48:53\n * @Last Modified by: 沈经纬(327538014@qq.com)\n * @Last Modified time: 2019-12-16 15:49:37\n * @Content: 3阶均匀B样条曲线\n */\nimport { IPoint } from \"./types\";\nimport { BSplinePolynomial } from \"./BSplinePolynomial\";\n\nexport class UniformBSpline {\n  /**\n   * 阶数，表示3阶\n   */\n  order: number = 3;\n\n  /**\n   * t取值的最大值\n   */\n  maxT: number;\n\n  /**\n   * t取值的边界数组\n   */\n  tArray: number[];\n\n  cPoints: IPoint[];\n\n  tRange: [number, number];\n  bSplinePolynomial: BSplinePolynomial;\n\n  constructor(cPoints: IPoint[]) {\n    this.cPoints = cPoints;\n    this.maxT = cPoints.length + this.order;\n    this.tArray = this.generateTArray();\n    this.tRange = [this.order - 1, cPoints.length];\n    this.bSplinePolynomial = new BSplinePolynomial(this.tArray, this.order);\n  }\n\n  /**\n   * 生成t取值边界的数组\n   */\n  generateTArray(): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i <= this.maxT; i++) {\n      arr.push(i);\n    }\n    return arr;\n  }\n\n  getPoints(step: number = 0.05): IPoint[] {\n    const [min, max] = this.tRange;\n    const gens = this.cPoints.map((o, i) => this.bSplinePolynomial.get(i));\n    const arr: IPoint[] = [];\n    for (let i = min; i <= max; i += step) {\n      const bi = gens.map(f => f(i));\n      arr.push(\n        this.cPoints.reduce(\n          (prev, curr, index) => {\n            const [prevx, prevy] = prev;\n            const [currx, curry] = curr;\n            return [prevx + currx * bi[index], prevy + curry * bi[index]];\n          },\n          [0, 0]\n        )\n      );\n    }\n    return arr;\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport zrender from \"zrender\";\nimport { UniformBSpline } from \"../../libs/UniformBSpline\";\nimport { IPoint } from \"../../libs/types\";\n\nlet points: IPoint[] = [\n  [50, 10],\n  [100, 30],\n  [200, 60],\n  [300, 300],\n  [150, 200],\n  [100, 150],\n  [50, 100],\n];\n\nexport default function UniformBSplineOfOrderThree() {\n  const elRef = useRef<HTMLDivElement>(null);\n  const [z, setZ] = useState<any>(null);\n\n  useEffect(() => {\n    if (elRef.current && z == null) {\n      setZ(zrender.init(elRef.current, { renderer: \"canvas\" }));\n    }\n    // eslint-disable-next-line\n  }, [elRef.current]);\n\n  useEffect(() => {\n    if (z) {\n      const bSpline = new UniformBSpline(points);\n      const linePoints = bSpline.getPoints();\n      let line = new zrender.Polyline({\n        shape: {\n          points: linePoints,\n        },\n      });\n      z.add(line);\n\n      points.forEach((o, i) => {\n        const circle = new zrender.Circle({\n          shape: {\n            cx: o[0],\n            cy: o[1],\n            r: 3,\n          },\n          draggable: true,\n        });\n        circle.on(\"drag\", (e: any) => {\n          points[i] = [e.offsetX, e.offsetY] as IPoint;\n          const bSpline = new UniformBSpline(points);\n          const linePoints = bSpline.getPoints();\n          line.shape.points = linePoints;\n          line.dirty();\n        });\n        z.add(circle);\n      });\n    }\n  }, [z]);\n\n  return (\n    <div style={{ padding: \"32px 0\" }}>\n      <div style={{ textAlign: \"center\", marginBottom: \"32px\" }}>\n        均匀三阶B样条曲线\n      </div>\n      <div ref={elRef} style={{ width: \"100%\", height: \"600px\" }} />\n    </div>\n  );\n}\n","import UniformBSplineOfOrderThree from \"./UniformBSplineOfOrderThree\";\n\nexport default UniformBSplineOfOrderThree;\n","import { BSplinePolynomial } from \"./BSplinePolynomial\";\nimport { IPoint } from \"./types\";\n\ninterface IBSplineOpts {\n  order: number;\n  points: IPoint[];\n  tArray: number[];\n}\n\nexport class BSpline {\n  order: number;\n  points: IPoint[];\n  tArray: number[];\n  bSplinePolynomial: BSplinePolynomial;\n\n  constructor(opts: IBSplineOpts) {\n    this.order = opts.order;\n    this.points = opts.points;\n    this.tArray = opts.tArray;\n    if (this.order > this.points.length) {\n      throw new Error(\n        `the order(${this.order}) cannot be greater than the length of control point(${this.points.length}).`\n      );\n    }\n    if (this.order < 2) {\n      throw new Error(\"order cannot be less than 2.\");\n    }\n    if (this.tArray.length !== this.points.length + this.order) {\n      throw new Error(\n        `the array length of parameter t (${this.tArray.length}) must be equal to the sum of the length of points (${this.points.length}) and the order (${this.order}).`\n      );\n    }\n    this.bSplinePolynomial = new BSplinePolynomial(this.tArray, this.order);\n  }\n\n  getPoint(t: number) {\n    return this.points.reduce(\n      (prev, curr, index) => {\n        const [x, y] = prev;\n        const [nx, ny] = curr;\n        const ratio = this.bSplinePolynomial.get(index)(t);\n        return [x + ratio * nx, y + ratio * ny];\n      },\n      [0, 0]\n    );\n  }\n\n  updatePoint(index: number, point: IPoint) {\n    if (index < 0 || index > this.points.length - 1) {\n      throw new Error(`parameter index error.`);\n    }\n    this.points[index] = point;\n  }\n}\n","/*\n * @Author: 沈经纬(327538014@qq.com)\n * @Date: 2019-12-16 15:48:36\n * @Last Modified by:   沈经纬(327538014@qq.com)\n * @Last Modified time: 2019-12-16 15:48:36\n * @Content: 开放均匀B样条曲线\n */\nimport { IPoint } from \"./types\";\nimport { BSpline } from \"./BSpline\";\n\nexport class OpenUniformBSplineClass {\n  mutationPointIndexes: number[] = [];\n  ratioCache: Map<number, number> = new Map();\n  bSpline: BSpline;\n\n  constructor(cPoints: IPoint[], order: number) {\n    if (order > cPoints.length) {\n      throw new Error(\n        `the order(${order}) cannot be greater than the length of control point(${cPoints.length}).`\n      );\n    }\n    if (order < 2) {\n      throw new Error(\"order cannot be less than 2.\");\n    }\n    this.bSpline = new BSpline({\n      order,\n      points: cPoints,\n      tArray: this.generateTArray(cPoints, order),\n    });\n  }\n\n  private generateTArray(cPoints: IPoint[], order: number) {\n    const arr: number[] = [];\n    const tLen = cPoints.length + order;\n    for (let i = 0; i < tLen; i += 1) {\n      if (i < order) {\n        arr.push(0);\n      } else if (i <= cPoints.length) {\n        arr.push(i - order + 1);\n      } else {\n        arr.push(cPoints.length - order + 1);\n      }\n    }\n    return arr;\n  }\n\n  getPoint(t: number) {\n    return this.bSpline.getPoint(t);\n  }\n\n  updatePoint(index: number, point: IPoint) {\n    if (index < 0 || index > this.bSpline.points.length - 1) {\n      throw new Error(`parameter index error.`);\n    }\n    this.bSpline.points[index] = point;\n  }\n}\n","import OpenUniformBSpline from \"./OpenUniformBSpline\";\n\nexport default OpenUniformBSpline;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport zrender from \"zrender\";\nimport { IPoint } from \"../../libs/types\";\nimport { OpenUniformBSplineClass } from \"../../libs/OpenUnformBSplineClass\";\n\nexport default function OpenUniformBSpline() {\n  const elRef = useRef<HTMLDivElement>(null);\n  const [z, setZ] = useState<any>(null);\n\n  useEffect(() => {\n    if (elRef.current && z == null) {\n      setZ(zrender.init(elRef.current, { renderer: \"canvas\" }));\n    }\n    // eslint-disable-next-line\n  }, [elRef.current]);\n\n  useEffect(() => {\n    if (z) {\n      const cPoints: IPoint[] = [\n        [50, 50],\n        [100, 70],\n        [80, 140],\n        [100, 200],\n        [160, 180],\n        [200, 200],\n        [200, 300],\n        [300, 200],\n        [400, 400],\n      ];\n      const bSpline = new OpenUniformBSplineClass(cPoints, 3);\n      const points: IPoint[] = [];\n      for (\n        let i = 0;\n        i <= bSpline.bSpline.tArray[bSpline.bSpline.tArray.length - 1];\n        i += 0.01\n      ) {\n        const p = bSpline.getPoint(i);\n        points.push(p);\n      }\n      let line = new zrender.Polyline({\n        shape: {\n          points,\n        },\n      });\n      z.add(line);\n\n      cPoints.forEach((o, i) => {\n        const circle = new zrender.Circle({\n          shape: {\n            cx: o[0],\n            cy: o[1],\n            r: 3,\n          },\n          draggable: true,\n        });\n        circle.on(\"drag\", (e: any) => {\n          const newPoint = [e.offsetX, e.offsetY] as IPoint;\n          cPoints[i] = newPoint;\n          bSpline.updatePoint(i, newPoint);\n          const points: IPoint[] = [];\n          for (\n            let i = 0;\n            i <= bSpline.bSpline.tArray[bSpline.bSpline.tArray.length - 1];\n            i += 0.01\n          ) {\n            const p = bSpline.getPoint(i);\n            points.push(p);\n          }\n          line.shape.points = points;\n          line.dirty();\n        });\n        z.add(circle);\n      });\n    }\n  }, [z]);\n  return (\n    <div style={{ padding: \"32px 0\" }}>\n      <div style={{ textAlign: \"center\", marginBottom: \"32px\" }}>\n        开放均匀B样条曲线\n      </div>\n      <div ref={elRef} style={{ width: \"100%\", height: \"400px\" }} />\n    </div>\n  );\n}\n","import RouterHeader from \"./RouterHeader\";\n\nexport default RouterHeader;\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport default function RouterHeader() {\n  const history = useHistory();\n  const location = useLocation();\n  return (\n    <div style={{ padding: \"16px\" }}>\n      <h1 style={{ textAlign: \"center\" }}>B样条曲线</h1>\n      <Radio.Group\n        value={location.pathname}\n        onChange={e => {\n          history.push(e.target.value);\n        }}\n      >\n        <Radio.Button value=\"/uniform-b-spline-of-order-3\">\n          均匀3阶B样条\n        </Radio.Button>\n        <Radio.Button value=\"/open-uniform-b-spline\">\n          开放均匀B样条\n        </Radio.Button>\n        <Radio.Button value=\"/dynamic-b-spline\">\n          动态参数的B样条曲线\n        </Radio.Button>\n      </Radio.Group>\n    </div>\n  );\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport zrender from \"zrender\";\nimport { map, cloneDeep } from \"lodash\";\nimport { IPoint } from \"../../libs/types\";\nimport { Form, InputNumber, Button, notification } from \"antd\";\nimport { BSpline } from \"../../libs/BSpline\";\n\nconst DEFAULT_C_POINTS: IPoint[] = [\n  [50, 50],\n  [100, 70],\n  [200, 200],\n  [200, 300],\n  [400, 400],\n];\nconst DEFAULT_T_ARRAY: number[] = [0, 0, 0, 1, 2, 3, 3, 3];\n\nexport default function DynamicBSpline() {\n  const elRef = useRef<HTMLDivElement>(null);\n  const [z, setZ] = useState<any>(null);\n  const [order, setOrder] = useState<number | undefined>(3);\n  const [cPoints, setCPoints] = useState<IPoint[]>(cloneDeep(DEFAULT_C_POINTS));\n  const [tArray, setTArray] = useState<number[]>(cloneDeep(DEFAULT_T_ARRAY));\n\n  useEffect(() => {\n    if (elRef.current && z == null) {\n      setZ(zrender.init(elRef.current, { renderer: \"canvas\" }));\n    }\n    // eslint-disable-next-line\n  }, [elRef.current]);\n\n  const handleGenerate = () => {\n    if (z == null || order == null) {\n      return;\n    }\n    z.clear();\n    try {\n      const bSpline = new BSpline({\n        points: cloneDeep(cPoints),\n        tArray,\n        order,\n      });\n      const points: IPoint[] = [];\n      for (\n        let i = 0;\n        i <= bSpline.tArray[bSpline.tArray.length - 1];\n        i += 0.05\n      ) {\n        const p = bSpline.getPoint(i);\n        points.push(p);\n      }\n      let line = new zrender.Polyline({\n        shape: {\n          points,\n        },\n      });\n      z.add(line);\n\n      cPoints.forEach((o, i) => {\n        const circle = new zrender.Circle({\n          shape: {\n            cx: o[0],\n            cy: o[1],\n            r: 3,\n          },\n          draggable: true,\n        });\n        circle.on(\"drag\", (e: any) => {\n          const newPoint = [e.offsetX, e.offsetY] as IPoint;\n          bSpline.updatePoint(i, newPoint);\n          const points: IPoint[] = [];\n          for (\n            let i = 0;\n            i <= bSpline.tArray[bSpline.tArray.length - 1];\n            i += 0.01\n          ) {\n            const p = bSpline.getPoint(i);\n            points.push(p);\n          }\n          line.shape.points = points;\n          line.dirty();\n        });\n        z.add(circle);\n      });\n    } catch (error) {\n      notification.error({ message: \"绘制错误\", description: error.message });\n    }\n  };\n\n  const handleReset = () => {\n    setOrder(3);\n    setCPoints(cloneDeep(DEFAULT_C_POINTS));\n    setTArray(cloneDeep(DEFAULT_T_ARRAY));\n    handleGenerate();\n  };\n\n  useEffect(() => {\n    if (z) {\n      handleGenerate();\n    }\n    // eslint-disable-next-line\n  }, [z]);\n\n  useEffect(() => {\n    if (order) {\n      const len = order + cPoints.length;\n      if (len !== tArray.length) {\n        const newTArray = cloneDeep(tArray);\n        newTArray.length = len;\n        for (let i = 0; i < len; i += 1) {\n          if (newTArray[i] === undefined) {\n            newTArray[i] = tArray[tArray.length - 1];\n          }\n        }\n        console.log(newTArray);\n        setTArray(newTArray);\n      }\n    }\n    // eslint-disable-next-line\n  }, [order, cPoints]);\n\n  return (\n    <div style={{ padding: \"16px\" }}>\n      <div style={{ textAlign: \"center\", marginBottom: \"32px\" }}>\n        自由参数的B样条曲线（默认为开放均匀三阶B样条）\n      </div>\n      <Form layout=\"inline\">\n        <Form.Item label=\"阶数\">\n          <InputNumber step={1} min={2} value={order} onChange={setOrder} />\n        </Form.Item>\n        <Form.Item label=\"控制点\">\n          <div style={{ textAlign: \"center\" }}>\n            {map(cPoints, (cp, index) => {\n              return (\n                <div\n                  style={{ display: \"flex\", marginBottom: \"6px\" }}\n                  key={index}\n                >\n                  <div style={{ paddingRight: \"6px\" }}>\n                    x<sub>{index}</sub>{\" \"}\n                    <InputNumber\n                      value={cp[0]}\n                      onChange={e => {\n                        cPoints[index][0] = e || 0;\n                        setCPoints([...cPoints]);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    y<sub>{index}</sub>{\" \"}\n                    <InputNumber\n                      value={cp[1]}\n                      onChange={e => {\n                        cPoints[index][1] = e || 0;\n                        setCPoints([...cPoints]);\n                      }}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n            <Button\n              onClick={() => {\n                cPoints.push([0, 0]);\n                setCPoints([...cPoints]);\n              }}\n              style={{ marginTop: \"16px\" }}\n            >\n              添加控制点\n            </Button>\n          </div>\n        </Form.Item>\n        <Form.Item label=\"参数t数组\">\n          <>\n            {map(tArray, (t, index) => {\n              return (\n                <div style={{ marginBottom: \"6px\" }} key={index}>\n                  t<sub>{index}</sub>:{\" \"}\n                  <InputNumber\n                    value={t}\n                    onChange={e => {\n                      tArray[index] = e || 0;\n                      setTArray([...tArray]);\n                    }}\n                  />\n                </div>\n              );\n            })}\n          </>\n        </Form.Item>\n\n        <Form.Item>\n          <Button.Group>\n            <Button type=\"primary\" onClick={handleGenerate}>\n              生成\n            </Button>\n            <Button type=\"danger\" onClick={handleReset}>\n              重置\n            </Button>\n          </Button.Group>\n        </Form.Item>\n      </Form>\n      <div ref={elRef} style={{ width: \"100%\", height: \"600px\" }} />\n    </div>\n  );\n}\n","import DynamicBSpline from \"./DynamicBSpline\";\n\nexport default DynamicBSpline;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport UniformBSplineOfOrderThree from \"./pages/UniformBSplineOfOrderThree\";\nimport OpenUniformBSpline from \"./pages/OpenUniformBSpline\";\nimport RouterHeader from \"./components/RouterHeader\";\nimport DynamicBSpline from \"./pages/DynamicBSpline\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <RouterHeader />\n      <Switch>\n        <Route\n          path=\"/uniform-b-spline-of-order-3\"\n          component={UniformBSplineOfOrderThree}\n        />\n        <Route path=\"/open-uniform-b-spline\" component={OpenUniformBSpline} />\n        <Route path=\"/dynamic-b-spline\" component={DynamicBSpline} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}