{"version":3,"sources":["pages/UniformBSplineOfOrderThree/UniformBSplineOfOrderThree.tsx","pages/UniformBSplineOfOrderThree/index.ts","pages/OpenUniformBSpline/OpenUniformBSpline.tsx","pages/OpenUniformBSpline/index.ts","components/RouterHeader/index.ts","components/RouterHeader/RouterHeader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDividedValue","numerator","denominator","BSpline","cPoints","order","maxT","tArray","factorArray","tRange","this","length","generateTArray","arr","i","push","min","max","gens","map","o","getFactorGenerator","bi","f","reduce","prev","curr","index","prevx","prevy","currx","curry","k","t_k","t_k_1","t_k_2","t_k_3","t","points","UniformBSplineOfOrderThree","elRef","useRef","useState","z","setZ","useEffect","current","zrender","init","renderer","linePoints","getPoints","line","Polyline","shape","add","forEach","circle","Circle","cx","cy","r","draggable","on","e","offsetX","offsetY","dirty","style","padding","textAlign","marginBottom","ref","width","height","BSplinePolynomial","maxIndex","cache","Map","polynomialArray","cacheFunc","get","getFuncByOrderOne","getFuncByOrderGreaterThanOne","func","set","tList","polynomialIndexSubtractOne","bSplinePolynomial","Error","tLen","x","y","nx","ny","ratio","OpenUniformBSpline","bSpline","p","getPoint","RouterHeader","history","useHistory","location","useLocation","Group","value","pathname","onChange","target","Button","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab4647d2.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport zrender from \"zrender\";\n\ninterface IFactorType {}\n\nexport type IPoint = [number, number];\n\nconst getDividedValue = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    return 0;\n  } else {\n    return numerator / denominator;\n  }\n};\n\nclass BSpline {\n  /**\n   * 阶数，表示3阶\n   */\n  order: number = 3;\n\n  /**\n   * t取值的最大值\n   */\n  maxT: number;\n\n  /**\n   * t取值的边界数组\n   */\n  tArray: number[];\n\n  factorArray: IFactorType[];\n\n  cPoints: IPoint[];\n\n  tRange: [number, number];\n\n  constructor(cPoints: IPoint[]) {\n    this.cPoints = cPoints;\n    this.maxT = cPoints.length + this.order;\n    this.tArray = this.generateTArray();\n    this.factorArray = [];\n    this.tRange = [this.order - 1, cPoints.length];\n  }\n\n  /**\n   * 生成t取值边界的数组\n   */\n  generateTArray(): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i <= this.maxT; i++) {\n      arr.push(i);\n    }\n    return arr;\n  }\n\n  getPoints(): IPoint[] {\n    const [min, max] = this.tRange;\n    const gens = this.cPoints.map((o, i) => this.getFactorGenerator(i));\n    const arr: IPoint[] = [];\n    const step = 0.1;\n    for (let i = min; i <= max; i += step) {\n      const bi = gens.map(f => f(i));\n      arr.push(\n        this.cPoints.reduce(\n          (prev, curr, index) => {\n            const [prevx, prevy] = prev;\n            const [currx, curry] = curr;\n            return [prevx + currx * bi[index], prevy + curry * bi[index]];\n          },\n          [0, 0]\n        )\n      );\n    }\n    return arr;\n  }\n\n  /**\n   * 获得多项式系数\n   */\n  getFactorGenerator(k: number) {\n    const t_k = this.tArray[k];\n    const t_k_1 = this.tArray[k + 1];\n    const t_k_2 = this.tArray[k + 2];\n    const t_k_3 = this.tArray[k + 3];\n    return (t: number) => {\n      if (t < t_k || t >= t_k_3) {\n        return 0;\n      }\n      if (t < t_k_1) {\n        return (\n          getDividedValue(t - t_k, t_k_2 - t_k) *\n          getDividedValue(t - t_k, t_k_1 - t_k)\n        );\n      } else if (t < t_k_2) {\n        return (\n          getDividedValue(t - t_k, t_k_2 - t_k) *\n            getDividedValue(t_k_2 - t, t_k_2 - t_k_1) +\n          getDividedValue(t_k_3 - t, t_k_3 - t_k_1) *\n            getDividedValue(t - t_k_1, t_k_2 - t_k_1)\n        );\n      } else if (t < t_k_3) {\n        return (\n          getDividedValue(t_k_3 - t, t_k_3 - t_k_1) *\n          getDividedValue(t_k_3 - t, t_k_3 - t_k_2)\n        );\n      } else {\n        return 0;\n      }\n    };\n  }\n}\n\nlet points: IPoint[] = [\n  [50, 10],\n  [100, 30],\n  [200, 60],\n  [300, 300],\n  [150, 200],\n  [100, 150],\n  [50, 100],\n];\n\nexport default function UniformBSplineOfOrderThree() {\n  const elRef = useRef<HTMLDivElement>(null);\n  const [z, setZ] = useState<any>(null);\n\n  useEffect(() => {\n    if (elRef.current && z == null) {\n      setZ(zrender.init(elRef.current, { renderer: \"canvas\" }));\n    }\n    // eslint-disable-next-line\n  }, [elRef.current]);\n\n  useEffect(() => {\n    if (z) {\n      const bSpline = new BSpline(points);\n      const linePoints = bSpline.getPoints();\n      let line = new zrender.Polyline({\n        shape: {\n          points: linePoints,\n        },\n      });\n      z.add(line);\n\n      points.forEach((o, i) => {\n        const circle = new zrender.Circle({\n          shape: {\n            cx: o[0],\n            cy: o[1],\n            r: 3,\n          },\n          draggable: true,\n        });\n        circle.on(\"drag\", (e: any) => {\n          points[i] = [e.offsetX, e.offsetY] as IPoint;\n          const bSpline = new BSpline(points);\n          const linePoints = bSpline.getPoints();\n          line.shape.points = linePoints;\n          line.dirty();\n        });\n        z.add(circle);\n      });\n    }\n  }, [z]);\n\n  return (\n    <div style={{ padding: \"32px 0\" }}>\n      <div style={{ textAlign: \"center\", marginBottom: \"32px\" }}>\n        均匀三阶B样条曲线\n      </div>\n      <div ref={elRef} style={{ width: \"100%\", height: \"400px\" }} />\n    </div>\n  );\n}\n","import UniformBSplineOfOrderThree from \"./UniformBSplineOfOrderThree\";\n\nexport default UniformBSplineOfOrderThree;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport zrender from \"zrender\";\nimport { IPoint } from \"../UniformBSplineOfOrderThree/UniformBSplineOfOrderThree\";\n\ntype IPolynomialFunc = (t: number) => number;\n\nconst getDividedValue = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    return 0;\n  } else {\n    return numerator / denominator;\n  }\n};\n\nclass BSplinePolynomial {\n  order: number;\n  tArray: number[];\n  maxIndex: number;\n  cache: Map<number, IPolynomialFunc> = new Map();\n  polynomialArray: BSplinePolynomial[] = [];\n\n  constructor(tArray: number[], order: number) {\n    this.tArray = tArray;\n    this.order = order;\n    this.maxIndex = tArray.length - order;\n    for (let i = 0; i < order; i += 1) {\n      this.polynomialArray.push(new BSplinePolynomial(this.tArray, i));\n    }\n  }\n\n  get(index: number): IPolynomialFunc {\n    if (index > this.maxIndex) {\n      // throw new Error(\n      //   `index(${index}) cannot be greater than the max index(${this.maxIndex})`\n      // );\n      return () => 0;\n    }\n    const cacheFunc = this.cache.get(index);\n    if (cacheFunc) {\n      return cacheFunc;\n    }\n    if (this.order === 1) {\n      return this.getFuncByOrderOne(index);\n    } else {\n      return this.getFuncByOrderGreaterThanOne(index);\n    }\n  }\n\n  /**\n   * if order is equal to 1, return the function of 't'.\n   * @param index\n   */\n  private getFuncByOrderOne(index: number): IPolynomialFunc {\n    const func = (t: number) => {\n      if (t >= this.tArray[index] && t < this.tArray[index + 1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n    this.cache.set(index, func);\n    return func;\n  }\n\n  private getFuncByOrderGreaterThanOne(index: number): IPolynomialFunc {\n    const tList = this.tArray;\n    const order = this.order;\n    const polynomialIndexSubtractOne = this.polynomialArray[order - 1];\n    const func = (t: number) => {\n      return (\n        getDividedValue(\n          t - tList[index],\n          tList[index + order - 1] - tList[index]\n        ) *\n          polynomialIndexSubtractOne.get(index)(t) +\n        getDividedValue(\n          tList[index + order] - t,\n          tList[index + order] - tList[index + 1]\n        ) *\n          polynomialIndexSubtractOne.get(index + 1)(t)\n      );\n    };\n    return func;\n  }\n}\n\nclass BSpline {\n  cPoints: IPoint[];\n  order: number;\n  tArray: number[];\n  bSplinePolynomial: BSplinePolynomial;\n\n  constructor(cPoints: IPoint[], order: number) {\n    if (order > cPoints.length) {\n      throw new Error(\n        `the order(${order}) cannot be greater than the length of control point(${cPoints.length}).`\n      );\n    }\n    if (order < 2) {\n      throw new Error(\"order cannot be less than 2.\");\n    }\n    this.cPoints = cPoints;\n    this.order = order;\n    this.tArray = this.generateTArray();\n    this.bSplinePolynomial = new BSplinePolynomial(this.tArray, order);\n  }\n\n  private generateTArray() {\n    const arr: number[] = [];\n    const tLen = this.cPoints.length + this.order;\n    for (let i = 0; i < tLen; i += 1) {\n      if (i < this.order) {\n        arr.push(0);\n      } else if (i <= this.cPoints.length) {\n        arr.push(i - this.order + 1);\n      } else {\n        arr.push(this.cPoints.length - this.order + 1);\n      }\n    }\n    return arr;\n  }\n\n  getPoint(t: number) {\n    return this.cPoints.reduce(\n      (prev, curr, index) => {\n        const [x, y] = prev;\n        const [nx, ny] = curr;\n        const ratio = this.bSplinePolynomial.get(index)(t);\n        return [x + ratio * nx, y + ratio * ny];\n      },\n      [0, 0]\n    );\n  }\n}\n\nexport default function OpenUniformBSpline() {\n  const elRef = useRef<HTMLDivElement>(null);\n  const [z, setZ] = useState<any>(null);\n\n  useEffect(() => {\n    if (elRef.current && z == null) {\n      setZ(zrender.init(elRef.current, { renderer: \"canvas\" }));\n    }\n    // eslint-disable-next-line\n  }, [elRef.current]);\n\n  useEffect(() => {\n    if (z) {\n      const cPoints: IPoint[] = [\n        [50, 50],\n        [100, 70],\n        [80, 140],\n        [100, 200],\n        [160, 180],\n        [200, 200],\n        [200, 300],\n        [300, 200],\n        [400, 400],\n      ];\n      const bSpline = new BSpline(cPoints, 3);\n      const points: IPoint[] = [];\n      for (\n        let i = 0;\n        i <= bSpline.tArray[bSpline.tArray.length - 1];\n        i += 0.01\n      ) {\n        const p = bSpline.getPoint(i);\n        points.push(p);\n      }\n      let line = new zrender.Polyline({\n        shape: {\n          points,\n        },\n      });\n      z.add(line);\n\n      cPoints.forEach((o, i) => {\n        const circle = new zrender.Circle({\n          shape: {\n            cx: o[0],\n            cy: o[1],\n            r: 3,\n          },\n          draggable: true,\n        });\n        circle.on(\"drag\", (e: any) => {\n          cPoints[i] = [e.offsetX, e.offsetY] as IPoint;\n          const bSpline = new BSpline(cPoints, 3);\n          const points: IPoint[] = [];\n          for (\n            let i = 0;\n            i <= bSpline.tArray[bSpline.tArray.length - 1];\n            i += 0.01\n          ) {\n            const p = bSpline.getPoint(i);\n            points.push(p);\n          }\n          line.shape.points = points;\n          line.dirty();\n        });\n        z.add(circle);\n      });\n    }\n  }, [z]);\n  return (\n    <div style={{ padding: \"32px 0\" }}>\n      <div style={{ textAlign: \"center\", marginBottom: \"32px\" }}>\n        开放均匀B样条曲线\n      </div>\n      <div ref={elRef} style={{ width: \"100%\", height: \"400px\" }} />\n    </div>\n  );\n}\n","import OpenUniformBSpline from \"./OpenUniformBSpline\";\n\nexport default OpenUniformBSpline;\n","import RouterHeader from \"./RouterHeader\";\n\nexport default RouterHeader;\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport default function RouterHeader() {\n  const history = useHistory();\n  const location = useLocation();\n  return (\n    <div style={{ padding: \"16px\" }}>\n      <h1 style={{ textAlign: \"center\" }}>B样条曲线</h1>\n      <Radio.Group\n        value={location.pathname}\n        onChange={e => {\n          history.push(e.target.value);\n        }}\n      >\n        <Radio.Button value=\"/uniform-b-spline-of-order-3\">\n          均匀3阶B样条\n        </Radio.Button>\n        <Radio.Button value=\"/open-uniform-b-spline\">\n          开放均匀B样条\n        </Radio.Button>\n      </Radio.Group>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport UniformBSplineOfOrderThree from \"./pages/UniformBSplineOfOrderThree\";\nimport OpenUniformBSpline from \"./pages/OpenUniformBSpline\";\nimport RouterHeader from \"./components/RouterHeader\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <RouterHeader />\n      <Switch>\n        <Route\n          path=\"/uniform-b-spline-of-order-3\"\n          component={UniformBSplineOfOrderThree}\n        />\n        <Route path=\"/open-uniform-b-spline\" component={OpenUniformBSpline} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}